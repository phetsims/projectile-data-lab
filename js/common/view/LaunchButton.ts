// Copyright 2024-2025, University of Colorado Boulder

/**
 * The launch button for Projectile Data Lab. This is used to launch projectiles, activate/deactivate continuous launching,
 * and auto-generate data. It has an interchangeable icon that changes based on the current mode, and also handles
 * sonification and keyboard input.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import TReadOnlyProperty from '../../../../axon/js/TReadOnlyProperty.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
import optionize, { EmptySelfOptions } from '../../../../phet-core/js/optionize.js';
import HotkeyData from '../../../../scenery/js/input/HotkeyData.js';
import KeyboardListener from '../../../../scenery/js/listeners/KeyboardListener.js';
import Image from '../../../../scenery/js/nodes/Image.js';
import Node from '../../../../scenery/js/nodes/Node.js';
import Rectangle from '../../../../scenery/js/nodes/Rectangle.js';
import RectangularPushButton, { RectangularPushButtonOptions } from '../../../../sun/js/buttons/RectangularPushButton.js';
import ToggleNode from '../../../../sun/js/ToggleNode.js';
import SoundClip from '../../../../tambo/js/sound-generators/SoundClip.js';
import soundManager from '../../../../tambo/js/soundManager.js';
import launchButtonAutoGenerate_png from '../../../images/launchButtonAutoGenerate_png.js';
import launchButtonContinuous_png from '../../../images/launchButtonContinuous_png.js';
import launchButtonSingle_png from '../../../images/launchButtonSingle_png.js';
import autoGenerateButton_mp3 from '../../../sounds/autoGenerateButton_mp3.js';
import projectileDataLab from '../../projectileDataLab.js';
import ProjectileDataLabStrings from '../../ProjectileDataLabStrings.js';
import { SingleOrContinuous } from '../model/SingleOrContinuous.js';
import PDLColors from '../PDLColors.js';
import PDLPreferences from '../PDLPreferences.js';

type SelfOptions = EmptySelfOptions;
type LaunchButtonOptions = SelfOptions & RectangularPushButtonOptions;

export default class LaunchButton extends RectangularPushButton {
  public constructor(
    isContinuousLaunchingProperty: TReadOnlyProperty<boolean>,
    launchModeProperty: TReadOnlyProperty<SingleOrContinuous>,
    launchButtonPressed: () => void,
    providedOptions: LaunchButtonOptions ) {

    const launchIconToggleNode = new ToggleNode<'single' | 'continuous', Image>( launchModeProperty, [ {
      value: 'single',
      createNode: () => new Image( launchButtonSingle_png )
    }, {
      value: 'continuous',
      createNode: () => new Image( launchButtonContinuous_png )
    } ] );

    const launchButtonToggleNode = new ToggleNode<boolean, Node>( new DerivedProperty( [
      isContinuousLaunchingProperty,
      launchModeProperty
    ], ( isContinuousLaunching, launchMode ) => isContinuousLaunching && launchMode === 'continuous' ), [ {
      value: false,
      createNode: () => launchIconToggleNode
    }, {
      value: true,
      createNode: () => new Rectangle( 0, 0, 50, 50, {
        fill: 'black',
        stroke: 'white',
        lineWidth: 2,
        cornerRadius: 5,
        opacity: 0.75 // Adjusts the color of the icon to look more like part of the button
      } )
    } ] );

    const launchButtonWithAutogenerateToggleNode = new ToggleNode<boolean, Node>( PDLPreferences.autoGenerateDataProperty, [ {
      value: false,
      createNode: () => launchButtonToggleNode
    }, {
      value: true,
      createNode: () => new Image( launchButtonAutoGenerate_png )
    } ] );

    const autoGenerateButtonSoundClip = new SoundClip( autoGenerateButton_mp3, { initialOutputLevel: 0.1 } );
    soundManager.addSoundGenerator( autoGenerateButtonSoundClip, { categoryName: 'user-interface' } );

    const options = optionize<LaunchButtonOptions, SelfOptions, RectangularPushButtonOptions>()( {
      content: launchButtonWithAutogenerateToggleNode,
      baseColor: PDLColors.launchButtonFillProperty,
      disabledColor: PDLColors.launchButtonDisabledFillProperty,
      size: new Dimension2( 85, 45 ),
      yMargin: 5,
      phetioFeatured: true,
      listener: launchButtonPressed,
      soundPlayer: {
        play: () => {
          if ( PDLPreferences.autoGenerateDataProperty.value ) {
            autoGenerateButtonSoundClip.play();
          }
        },
        stop: _.noop
      }
    }, providedOptions );

    super( options );

    // a listener that presses the button based on the keystroke, regardless of where focus is in the document
    KeyboardListener.createGlobal( this, {
      keyStringProperties: LaunchButton.LAUNCH_HOTKEY_DATA.keyStringProperties,
      fire: () => {
        if ( PDLPreferences.autoGenerateDataProperty.value ) {
          autoGenerateButtonSoundClip.play();
        }
        launchButtonPressed();
      }
    } );
  }

  public static readonly LAUNCH_HOTKEY_DATA = new HotkeyData( {
    keys: [ 'alt+l' ],
    keyboardHelpDialogLabelStringProperty: ProjectileDataLabStrings.launchOrStopProjectilesStringProperty,
    repoName: projectileDataLab.name,
    global: true
  } );
}

projectileDataLab.register( 'LaunchButton', LaunchButton );