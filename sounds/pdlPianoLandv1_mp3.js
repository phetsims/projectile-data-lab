/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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XTLp+2iiQY6BxKhGRLqsr0DRUAvqqEhWU5pH//tCxA0ACMB1P6SYbMECDqc2hoAEH/PCcw2qtxmUwwrlL6FE5qAjFHpYeSERU7UI2ArhxK3NqSsUeNzIcb2sWqgF6XXeRxtkuBiO3yucPysFYjxoCJt0tVkrKkwVe3OsfN81aZwJmhKLC4RKBlD3MIuamzVTetT0qsFlts/9H//+lUInAHAGAGAGgPxcAxmIhqAs1tvR/T+n7vQg4PBfkVcRFB83/PiQRAQcHv1gyCIV6NfFv6L+//tCxBqAB0CRP/gigACDAGG3jCAGS/7/2BUAPYAAcAXCjAK9ai3/oEQc//9NPRal77v/0Js/X//qFqUO7jDj7AAAABo0xgao2h/eMFKEgqGO0C2gAwUzCmAgI4FBQUFCjv///L4pMFBQZoKVTEFNRTMuOTkuNVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVV//tCxD4AQmQBB6CEQDB0ghu0YYgNVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjk5LjVVVVVVVVVVVVVVVVVVVVVV//tCxHaDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//tCxK6DwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//tAxK8DwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;