/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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QBS5NqDRi0ydiixrzCTQDSNQL270NdW5L1fV4jjTDUChJNyP/t7/NtVPVf61TAojMyEjJSokpKB+vRVcGPcGWQZ7wjZgy//7QsTsgAasB0egmEAxl7Hi6QQV8BCLzBliDLODLMGWAj78GPPgyXgyX+EZfgzJAzJAeSycGZKDMnA8lkv/Bjzwi8/+DHn/Bjz///Bj34Rs//8I2PCNj4RseDLODLEGWf/gyxwZ6wZ7/hH1+DPfCPv8thSmuzSWtogBahpd6Y09etd0Za+2kxt+0h9+jdezZ3pXc3qq9vW7brf/pprVTEFNRTMuOTkuNVVVVVVVVVVVVVVVVVVVVf/7QsTqgAkEgxZBLGAAvItldBCMvFVVVVVVVVVVVVVVARbiubjdSARwCS15ykvVJbNXjMzUoyqqqq/VgZm18tmbVW9mY/2Zh5pTKXzL1KXL6OUBATG0MBGK/sjq6lK3/QxjF38pjGNUpS/1K/6GK3T6lQylQuhgIVbaBbQBJAEhYWFv/8VFRUVFIs3///9bKxYWFhYXFRUVZ/1irKlMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVf/7QsT5gAxVdqwL2vQAy4AldBCI5FVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7QsT/AA6dlO3qVpZQrYAldBCNdFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7QMTtgQsNiRejDE3gkYAYdBEMBlVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;