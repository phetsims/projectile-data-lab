/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;