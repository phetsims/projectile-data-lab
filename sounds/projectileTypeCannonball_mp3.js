/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;